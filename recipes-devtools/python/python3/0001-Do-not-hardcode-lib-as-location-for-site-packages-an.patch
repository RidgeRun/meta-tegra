From 0fbdad1eaf541a8e92be81f39514cd249b3b0801 Mon Sep 17 00:00:00 2001
From: Alexander Kanavin <alex.kanavin@gmail.com>
Date: Tue, 5 Feb 2019 15:52:02 +0100
Subject: [PATCH] Do not hardcode "lib" as location for modules, site-packages
 and lib-dynload

Upstream-Status: Inappropriate [oe-core specific]
Signed-off-by: Alexander Kanavin <alex.kanavin@gmail.com>

---
 Include/pythonrun.h  |  2 ++
 Lib/site.py          |  4 ++--
 Makefile.pre.in      |  5 +++--
 Modules/getpath.c    | 18 ++++++++++++------
 Python/getplatform.c | 10 ++++++++++
 Python/sysmodule.c   |  2 ++
 6 files changed, 31 insertions(+), 10 deletions(-)

Index: Python-3.6.9/Include/pythonrun.h
===================================================================
--- Python-3.6.9.orig/Include/pythonrun.h
+++ Python-3.6.9/Include/pythonrun.h
@@ -23,6 +23,8 @@ typedef struct {
 } PyCompilerFlags;
 #endif
 
+PyAPI_FUNC(const char *) Py_GetLib(void);
+
 #ifndef Py_LIMITED_API
 PyAPI_FUNC(int) PyRun_SimpleStringFlags(const char *, PyCompilerFlags *);
 PyAPI_FUNC(int) PyRun_AnyFileFlags(FILE *, const char *, PyCompilerFlags *);
Index: Python-3.6.9/Lib/site.py
===================================================================
--- Python-3.6.9.orig/Lib/site.py
+++ Python-3.6.9/Lib/site.py
@@ -304,12 +304,12 @@ def getsitepackages(prefixes=None):
         seen.add(prefix)
 
         if os.sep == '/':
-            sitepackages.append(os.path.join(prefix, "lib",
+            sitepackages.append(os.path.join(prefix, sys.lib,
                                         "python%d.%d" % sys.version_info[:2],
                                         "site-packages"))
         else:
             sitepackages.append(prefix)
-            sitepackages.append(os.path.join(prefix, "lib", "site-packages"))
+            sitepackages.append(os.path.join(prefix, sys.lib, "site-packages"))
         if sys.platform == "darwin":
             # for framework builds *only* we add the standard Apple
             # locations.
Index: Python-3.6.9/Makefile.pre.in
===================================================================
--- Python-3.6.9.orig/Makefile.pre.in
+++ Python-3.6.9/Makefile.pre.in
@@ -139,7 +139,7 @@ LIBDIR=		@libdir@
 MANDIR=		@mandir@
 INCLUDEDIR=	@includedir@
 CONFINCLUDEDIR=	$(exec_prefix)/include
-SCRIPTDIR=	$(prefix)/lib
+SCRIPTDIR=	@libdir@
 ABIFLAGS=	@ABIFLAGS@
 
 # Detailed destination directories
@@ -745,6 +745,7 @@ Modules/getpath.o: $(srcdir)/Modules/get
 		-DEXEC_PREFIX='"$(exec_prefix)"' \
 		-DVERSION='"$(VERSION)"' \
 		-DVPATH='"$(VPATH)"' \
+		-DLIB='"$(LIB)"' \
 		-o $@ $(srcdir)/Modules/getpath.c
 
 Programs/python.o: $(srcdir)/Programs/python.c
@@ -833,7 +834,7 @@ regen-opcode:
 Python/compile.o Python/symtable.o Python/ast.o: $(srcdir)/Include/graminit.h $(srcdir)/Include/Python-ast.h
 
 Python/getplatform.o: $(srcdir)/Python/getplatform.c
-		$(CC) -c $(PY_CORE_CFLAGS) -DPLATFORM='"$(MACHDEP)"' -o $@ $(srcdir)/Python/getplatform.c
+		$(CC) -c $(PY_CORE_CFLAGS) -DPLATFORM='"$(MACHDEP)"' -DLIB='"$(LIB)"' -o $@ $(srcdir)/Python/getplatform.c
 
 Python/importdl.o: $(srcdir)/Python/importdl.c
 		$(CC) -c $(PY_CORE_CFLAGS) -I$(DLINCLDIR) -o $@ $(srcdir)/Python/importdl.c
Index: Python-3.6.9/Python/getplatform.c
===================================================================
--- Python-3.6.9.orig/Python/getplatform.c
+++ Python-3.6.9/Python/getplatform.c
@@ -10,3 +10,13 @@ Py_GetPlatform(void)
 {
 	return PLATFORM;
 }
+
+#ifndef LIB
+#define LIB "lib"
+#endif
+
+const char *
+Py_GetLib(void)
+{
+	return LIB;
+}
Index: Python-3.6.9/Python/sysmodule.c
===================================================================
--- Python-3.6.9.orig/Python/sysmodule.c
+++ Python-3.6.9/Python/sysmodule.c
@@ -1964,6 +1964,8 @@ _PySys_Init(void)
                         PyUnicode_FromWideChar(Py_GetPrefix(), -1));
     SET_SYS_FROM_STRING("base_exec_prefix",
                         PyUnicode_FromWideChar(Py_GetExecPrefix(), -1));
+    SET_SYS_FROM_STRING("lib",
+                        PyUnicode_FromString(Py_GetLib()));
     SET_SYS_FROM_STRING("maxsize",
                         PyLong_FromSsize_t(PY_SSIZE_T_MAX));
     SET_SYS_FROM_STRING("float_info",
Index: Python-3.6.9/Modules/getpath.c
===================================================================
--- Python-3.6.9.orig/Modules/getpath.c
+++ Python-3.6.9/Modules/getpath.c
@@ -490,13 +490,15 @@ calculate_path(void)
 #endif
     wchar_t *_pythonpath, *_prefix, *_exec_prefix;
     wchar_t *lib_python;
+    wchar_t *multilib_python;
 
     _pythonpath = Py_DecodeLocale(PYTHONPATH, NULL);
     _prefix = Py_DecodeLocale(PREFIX, NULL);
     _exec_prefix = Py_DecodeLocale(EXEC_PREFIX, NULL);
     lib_python = Py_DecodeLocale("lib/python" VERSION, NULL);
+    multilib_python = Py_DecodeLocale(LIB "/python" VERSION, NULL);
 
-    if (!_pythonpath || !_prefix || !_exec_prefix || !lib_python) {
+    if (!_pythonpath || !_prefix || !_exec_prefix || !lib_python || !multilib_python) {
         Py_FatalError(
             "Unable to decode path variables in getpath.c: "
             "memory error");
@@ -664,13 +666,13 @@ calculate_path(void)
         }
     }
 
-    pfound = search_for_prefix(argv0_path, home, _prefix, lib_python);
+    pfound = search_for_prefix(argv0_path, home, _prefix, multilib_python);
     if (!pfound) {
         if (!Py_FrozenFlag)
             fprintf(stderr,
                 "Could not find platform independent libraries <prefix>\n");
         wcsncpy(prefix, _prefix, MAXPATHLEN);
-        joinpath(prefix, lib_python);
+        joinpath(prefix, multilib_python);
     }
     else
         reduce(prefix);
@@ -689,7 +691,7 @@ calculate_path(void)
     zip_path[bufsz - 5] = VERSION[2];
 
     efound = search_for_exec_prefix(argv0_path, home,
-                                    _exec_prefix, lib_python);
+                                    _exec_prefix, multilib_python);
     if (!efound) {
         if (!Py_FrozenFlag)
             fprintf(stderr,
@@ -818,6 +820,7 @@ calculate_path(void)
     PyMem_RawFree(_prefix);
     PyMem_RawFree(_exec_prefix);
     PyMem_RawFree(lib_python);
+    PyMem_RawFree(multilib_python);
     PyMem_RawFree(rtpypath);
 }
 
